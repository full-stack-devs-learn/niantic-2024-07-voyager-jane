Bug Tracker

Class: Rectangle

    Bug 1:

        Describe the bug/error:
        getArea() should return zero if either the width or height is negative.

        Where was the bug? (function, line number)
        getArea(), Line 42 (originally)

        What test helped you find the bug?
        getArea_shouldCalculateAreaCorrectly_whenCalled()

        What did you do to fix the bug?
        I set up an if condition where if either height or width is less than or equal to zero, return 0.


    Bug 2:

        Describe the bug/error:
        Class variable width and height are public and therefore can be changed by a different party without a setter function. Access to class variables should not be public.l

        Where was the bug? (function, line number)
        public int width, Line 5
        public int height, Line 6

        What test helped you find the bug?
        newDefaultRectangle_shouldBeFiveFive_whenCreated() -> i just tried to see if setting the public variables would change default and it did.

        What did you do to fix the bug?
        Set the class variables to private.


    Bug 3:

        Describe the bug/error:
        Perimeter calculating incorrectly - it was only adding the width and height together once.

        Where was the bug? (function, line number)
        getPerimeter(), Line 52 (originally)

        What test helped you find the bug?
        getPerimeter_shouldCalculatePerimeterCorrectly_whenCalled()

        What did you do to fix the bug?
        Set getPerimeter to return (2 * width) + (2 * height).




Class: Quiz

    Bug 1:

        Describe the bug/error:
        Negative / Zero PossiblePoints should not exist or be a valid value.

        Where was the bug? (function, line number)
        getPossiblePoints(), Line 21 (originally)

        What test helped you find the bug?
        newQuiz_shouldMakeSurePossiblePointsArePositive_whenCreated()

        What did you do to fix the bug?
        I set an if condition to check if PossiblePoints was given a zero or negative value, and, if yes, default PossiblePoints to be 100.


    Bug 2:

        Describe the bug/error:
        Negative score should not exist or be a valid value.

        Where was the bug? (function, line number)
        setScore(int score), Line 16 (originally)

        What test helped you find the bug?
        setScore_shouldBePositive_whenSetterIsCalled()

        What did you do to fix the bug?
        Set a condition where if a score is less than zero, set the score to be 0 as default.


    Bug 3:

        Describe the bug/error:
        getPercent() / getPercentage() only returns 0 because of integer division.

        Where was the bug? (function, line number)
        getPercent(), Line54 (at time of bug found)

        What test helped you find the bug?
        getPercentage_ShouldCalculatePercentageCorrectly_whenCalled()

        What did you do to fix the bug?
        I made a variable with a data type double to make sure I can calculate the decimals correctly by making score a double and then dividing it by possiblePoints in parentheses ((double) score / possiblePoints). Then I multiplied the result by 100 and rounded it (Math.round) for an accurate integer percentage.


    Bug 4:

        Describe the bug/error:
        Each letter grade didn't have a greater than or equal to for (90, 80, 70, 60) instead it was just greater than. AND Letter Grade "D" was given an incorrect range. So 2 bugs in 1.

        Where was the bug? (function, line number)
        getLetterGrade(), Lines 63 - 66 (at time of bug found)

        What test helped you find the bug?
        getLetterGrade_shouldReturnCorrectGrade_whenCalled()

        What did you do to fix the bug?
        I set each range to be greater than or equal to. I also made the range for "D" to be greater than or equal to 60 rather than 50.


*** Optional / Challenge ***



Class: GameCharacter

    Bug 1:

        Describe the bug/error:
        takeHit() should not make energyLevel fall below zero.

        Where was the bug? (function, line number)
        takeHit(), Line 34 (originally)

        What test helped you find the bug?
        takeHit_shouldNotReduceBelowZeroEnergy_whenCalled()

        What did you do to fix the bug?
        Set an if/else condition where if energy level - damage < 0, set energyLevel to zero, otherwise proceed with the original calculation.


    Bug 2:

        Describe the bug/error:
        At creation, energyLevel is set to 0 even though it should be set to maxEnergyLevel at creation (full energy).

        Where was the bug? (function, line number)
        Constructor, Line 29 (at time of bug)

        What test helped you find the bug?
        takeHit_shouldReduceGivenEnergyLvl_whenCalled()

        What did you do to fix the bug?
        I set this.energyLevel to maxEnergyLevel in the Constructor.


    Bug 3:

        Describe the bug/error:
        heal() should not result in energyLevel greater than maxEnergyLevel.

        Where was the bug? (function, line number)
        heal(), Line 48 (at time of bug)

        What test helped you find the bug?
        heal_shouldNotIncreaseAboveMaxEnergy_whenCalled()

        What did you do to fix the bug?
        I set an if/else condition where if the amount healed plus the current energyLevel is greater than maxEnergyLevel, set energyLevel to maxEnergyLevel, otherwise just add the given amount.



    Bug 4:

        Describe the bug/error:
        heal() should not heal when character is knocked out (energyLevel is 0).

        Where was the bug? (function, line number)
        heal(), Lines 48-56 (at time of bug)

        What test helped you find the bug?
        heal_shouldNotHealWhenKnockedOut_whenCalled()

        What did you do to fix the bug?
        Set another if/elseif/else condition where first ifKnockedOut return nothing, else if check if healing goes over maxEnergyLevel (bug 3), else just heal the given amount.



Class: Printer

    Bug 1:

        Describe the bug/error:
        New Printer should not hold sheets or toner values that are greater than MAX_SHEET_CAPACITY / MAX_TONER.

        Where was the bug? (function, line number)
        Constructor, Lines 21-25 (at time of bug found)

        What test helped you find the bug?
        newPrinter_shouldNot_haveValues_moreThanMaxSheetsAndToner()

        What did you do to fix the bug?
        I made default values to be max values for sheets and toner if the provided input(s) for the Constructor go over the max values.


    Bug 2:

        Describe the bug/error:
        New Printer should not have negative sheets or negative toner as values.

        Where was the bug? (function, line number)
        Constructor, Lines 21-28 (at time of bug found)

        What test helped you find the bug?
        newPrinter_shouldNot_haveNegative_sheetsAndToners()

        What did you do to fix the bug?
        I made default values to be 0 if the provided input(s) for the Constructor are negative.


    Bug 3:

        Describe the bug/error:
        replaceToner() did not reset toner attribute to MAX_TONER but instead added MAX_TONER to current toner value.

        Where was the bug? (function, line number)
        replaceToner(), Line 58 (at time of bug found)

        What test helped you find the bug?
        replaceToner_should_resetToner_ToMaxCapacity()

        What did you do to fix the bug?
        Set this.toner to MAX_TONER.


    Bug 4:

        Describe the bug/error:
        addPrinter() does not stop at MAX_SHEET_CAPACITY when paper input goes over max value.

        Where was the bug? (function, line number)
        addPrinter(), Lines 44-54 (at time of bug found)

        What test helped you find the bug?
        addPaper_shouldNot_exceedMaxSheetsCapacity()

        What did you do to fix the bug?
        changed the if condition to be if (paper + getSheets() > MAX_SHEET_CAPACITY).


    Bug 5:

        Describe the bug/error:
        addPaper() subtracted sheets from printer when a negative input is given.

        Where was the bug? (function, line number)
        addPaper, Lines 46-53 (at time of bug found)

        What test helped you find the bug?
        addPaper_shouldNot_addNegativePaper()

        What did you do to fix the bug?
        set an if condition where if paper < 0, do nothing.

    Bug 6:

        Describe the bug/error:
        Negative number input in print() results in negative print copies and changes values for the printer's variables sheets and toner.

        Where was the bug? (function, line number)
        print(), Lines 35-41 (at time of bug found)

        What test helped you find the bug?
        print_shouldNot_printNegativePagesOrUpdateVariables()

        What did you do to fix the bug?
        Set an if condition where if the pages input is less than or equal to 0, do not do anything but return 0.
